---
name: Cross-Platform Build

on:
  push:
    branches: [main]
    tags:
      - 'v[0-9]+.*'
      - 'ngdp-client-v[0-9]+.*' 
      - 'libs-v[0-9]+.*'

  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - '**/Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/cross-build.yml'

  workflow_dispatch:

jobs:
  matrix-setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate build matrix for all supported platforms
        id: set-matrix
        run: |
          matrix=$(cat <<EOF
          {
            "include": [
              {"target": "aarch64-apple-darwin", "os": "macos-latest", "cross": false},
              {"target": "x86_64-apple-darwin", "os": "macos-latest", "cross": false},
              {"target": "aarch64-unknown-linux-gnu", "os": "ubuntu-latest", "cross": true},
              {"target": "aarch64-unknown-linux-musl", "os": "ubuntu-latest", "cross": true},
              {"target": "armv7-unknown-linux-gnueabihf", "os": "ubuntu-latest", "cross": true},
              {"target": "armv7-unknown-linux-musleabihf", "os": "ubuntu-latest", "cross": true},
              {"target": "x86_64-pc-windows-gnu", "os": "ubuntu-latest", "cross": true},
              {"target": "x86_64-pc-windows-msvc", "os": "windows-latest", "cross": false},
              {"target": "aarch64-pc-windows-msvc", "os": "windows-latest", "cross": false},
              {"target": "x86_64-unknown-linux-gnu", "os": "ubuntu-latest", "cross": false},
              {"target": "x86_64-unknown-linux-musl", "os": "ubuntu-latest", "cross": true}
            ]
          }
          EOF
          )
          echo "matrix=$(echo $matrix | jq -c .)" >> $GITHUB_OUTPUT

  cross-build:
    name: Build ${{ matrix.target }}
    needs: matrix-setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.86.0
          targets: ${{ matrix.target }}

      - name: Install cross for cross-compilation
        if: matrix.cross == true
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Cache Rust dependencies for ${{ matrix.target }}
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "cross-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true

      - name: Build libraries for ${{ matrix.target }}
        if: matrix.cross == false
        run: cargo build --target ${{ matrix.target }} --workspace --lib --verbose

      - name: Build ngdp-client CLI for ${{ matrix.target }}
        if: matrix.cross == false
        run: cargo build --target ${{ matrix.target }} --package ngdp-client --bin ngdp --verbose

      - name: Cross-build libraries for ${{ matrix.target }}
        if: matrix.cross == true
        run: cross build --target ${{ matrix.target }} --workspace --lib --verbose

      - name: Cross-build ngdp-client CLI for ${{ matrix.target }}
        if: matrix.cross == true
        run: cross build --target ${{ matrix.target }} --package ngdp-client --bin ngdp --verbose

  # Verify that all targets build successfully
  cross-build-success:
    name: Cross-Build Success
    if: always()
    needs: [cross-build]
    runs-on: ubuntu-latest
    steps:
      - name: Check all cross-builds
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more cross-builds failed"
            exit 1
          fi
          echo "All cross-builds succeeded"